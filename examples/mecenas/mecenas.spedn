/**
 * @param {Ripemd160} pkh - `protege()` 用の引き出し先アドレス
 * @param {Ripemd160} pkh2 - `mecenas()` 用の引き出し先アドレス
 * @param {int} pledge - `protege()` で一度に引き出せる金額
 * @param {TimeSpan} period - 引き出し間隔
 */
contract Mecenas(Ripemd160 pkh, Ripemd160 pkh2, int pledge, TimeSpan period) {

    /**
     * @param {PubKey} pk - 署名した秘密鍵に対応する公開鍵
     * @param {Sig} sig - トランザクション全体の署名
     * @param {bin} preimage - 署名前のシリアライズされたトランザクション
     */
    challenge protege(PubKey pk, Sig sig, bin preimage) {

        // preimage deserializaion
        bin [ver, _] = preimage @ 4; // nVersion
        bin [_, tail] = preimage @ (size(preimage) - 40); // hashOutput + nLocktime + sighash
        bin [hashOutput, _] = tail @ 32;
        bin [torso, _] =  preimage @ (size(preimage) - 44);
        bin [_, belly] = torso @ 104;
        bin [scriptCode, value] = belly @ (size(belly) - 8);

        //verify hash160(pk) == pkh; // Anyone Can Execute
        // トランザクションの検証
        verify checkSig(sig, pk);
        // preimage の検証
        verify checkDataSig(toDataSig(sig), sha256(preimage), pk);
        // 上記2つの検証で preimage は実際のトランザクションと一致することが保証された

        int fee = 1000;
        bin amount2 = num2bin(pledge, 8);
        bin amount1 = num2bin(bin2num(value)-pledge - fee, 8);

        // 送金先の計算に使う定数
        bin opDup = 0x76;
        bin opEqual = 0x87;
        bin opHash160 = 0xa9;
        bin pushHash = 0x14;
        bin newVarInt1 = 0x17;
        bin newVarInt2 = 0x19;
        bin opEqualverify = 0x88;
        bin opChecksig = 0xac;

        // rawscr がこのコントラクトの redeemScript
        bin [_, rawscr] = scriptCode @ 3;
        verify checkSequence(period);
        verify bin2num(ver) >= 2;

        // 送金先の検証
        bin out1 = amount1  . newVarInt1 . opHash160 . pushHash . hash160(rawscr) . opEqual ;
        bin out2 = amount2  . newVarInt2 . opDup . opHash160 . pushHash . pkh . opEqualverify . opChecksig;
        verify hash256(out1 . out2) == Sha256(hashOutput);
    }

    /**
     * @param {PubKey} pk - 署名した秘密鍵に対応する公開鍵
     * @param {Sig} sig - トランザクション全体の署名
     */
    challenge mecenas(PubKey pk, Sig sig) {
        verify hash160(pk) == pkh2;
        verify checkSig(sig, pk);
    }

}
